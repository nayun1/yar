//StockSearch.jsx
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import './StockSearch.css';

const StockSearch = () => {
    const [query, setQuery] = useState('');
    const [results, setResults] = useState([]);
    const [isOpen, setIsOpen] = useState(false);
    const [recentSearches, setRecentSearches] = useState([]);
    const searchRef = useRef(null);
    const navigate = useNavigate();

    // ÎîîÎ∞îÏö¥Ïã±ÏùÑ ÏúÑÌïú ÌÉÄÏù¥Î®∏ ref
    const searchTimeoutRef = useRef(null);

    // ÏãúÏû• ÌÉÄÏûÖÏóê Îî∞Î•∏ ÏïÑÏù¥ÏΩò Îß§Ìïë Ìï®Ïàò Ï∂îÍ∞Ä
    const getMarketIcon = (marketType) => {
        if (!marketType) return "‚ùì";

        switch (marketType.trim()) {
            case "Ïú†Í∞ÄÏ¶ùÍ∂å":
            case "Ïú†Í∞ÄÏ¶ùÍ∂åÏãúÏû•":
                return "üèõÔ∏è";
            case "ÏΩîÏä§Îã•":
                return "üü°";
            case "ÏΩîÎÑ•Ïä§":
                return "üü¢";
            case "ETF":
                return "üìà";
            case "ETN":
                return "üìä";
            case "ELW":
                return "üíé";
            default:
                return "‚ùì";
        }
    };

    // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú ÏµúÍ∑º Í≤ÄÏÉâÏñ¥ Î∂àÎü¨Ïò§Í∏∞
    useEffect(() => {
        const savedSearches = localStorage.getItem('recentStockSearches');
        if (savedSearches) {
            setRecentSearches(JSON.parse(savedSearches));
        }
    }, []);

    // Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ïãú ÎìúÎ°≠Îã§Ïö¥ Îã´Í∏∞
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (searchRef.current && !searchRef.current.contains(event.target)) {
                setIsOpen(false);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, []);

    // Í≤ÄÏÉâ Ïã§Ìñâ (ÏµúÍ∑º Í≤ÄÏÉâÏñ¥Ïóê Ï†ÄÏû•ÌïòÏßÄ ÏïäÏùå)
    const handleSearch = async (searchQuery = query) => {
        if (!searchQuery.trim()) {
            setResults([]);
            return;
        }

        try {
            const res = await axios.get(`/api/stocks/search`, {
                params: { name: searchQuery }
            });

            console.log("Í≤ÄÏÉâ Í≤∞Í≥º:", res.data);
            setResults(res.data);

        } catch (error) {
            console.error("Í≤ÄÏÉâ ÏóêÎü¨:", error);
        }
    };

    // ÎîîÎ∞îÏö¥Ïä§Îêú Í≤ÄÏÉâ Ìï®Ïàò
    const debouncedSearch = useCallback((searchQuery) => {
        // Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏ ÌÅ¥Î¶¨Ïñ¥
        if (searchTimeoutRef.current) {
            clearTimeout(searchTimeoutRef.current);
        }

        // ÏÉàÎ°úÏö¥ ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ï (500ms ÌõÑ Í≤ÄÏÉâ Ïã§Ìñâ)
        searchTimeoutRef.current = setTimeout(() => {
            handleSearch(searchQuery);
        }, 500); // 500ms ÎåÄÍ∏∞
    }, []);

    // ÏµúÍ∑º Í≤ÄÏÉâÏñ¥Ïóê Ï∂îÍ∞ÄÌïòÎäî Î≥ÑÎèÑ Ìï®Ïàò
    const addToRecentSearches = (searchTerm) => {
        const newRecentSearches = [
            searchTerm,
            ...recentSearches.filter(item => item !== searchTerm)
        ].slice(0, 5);

        setRecentSearches(newRecentSearches);
        localStorage.setItem('recentStockSearches', JSON.stringify(newRecentSearches));
    };

    // ÏûÖÎ†•Í∞í Î≥ÄÍ≤Ω Ïãú ÎîîÎ∞îÏö¥Ïä§Îêú Í≤ÄÏÉâ
    const handleInputChange = (e) => {
        const value = e.target.value;
        setQuery(value);

        if (value.trim()) {
            // Ï¶âÏãú Í≤ÄÏÉâÌïòÏßÄ ÏïäÍ≥† ÎîîÎ∞îÏö¥Ïä§Îêú Í≤ÄÏÉâ ÏÇ¨Ïö©
            debouncedSearch(value);
        } else {
            // Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏ ÌÅ¥Î¶¨Ïñ¥
            if (searchTimeoutRef.current) {
                clearTimeout(searchTimeoutRef.current);
            }
            setResults([]);
        }
    };

    // Í≤ÄÏÉâÎ∞î ÌÅ¥Î¶≠
    const handleInputClick = () => {
        setIsOpen(true);
    };

    // ÏµúÍ∑º Í≤ÄÏÉâÏñ¥ ÌÅ¥Î¶≠
    const handleRecentSearchClick = (searchTerm) => {
        setQuery(searchTerm);
        // Ï¶âÏãú Í≤ÄÏÉâ (ÎîîÎ∞îÏö¥Ïã± ÏóÜÏù¥)
        handleSearch(searchTerm);
    };

    // ÏóîÌÑ∞ÌÇ§ Ï≤òÎ¶¨ (Ï¶âÏãú Í≤ÄÏÉâ)
    const handleKeyPress = (e) => {
        if (e.key === 'Enter') {
            // Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏ ÌÅ¥Î¶¨Ïñ¥ÌïòÍ≥† Ï¶âÏãú Í≤ÄÏÉâ
            if (searchTimeoutRef.current) {
                clearTimeout(searchTimeoutRef.current);
            }
            handleSearch(query);
        }
    };

    // Í≤ÄÏÉâÏñ¥ ÌïòÏù¥ÎùºÏù¥Ìä∏ Ìï®Ïàò
    const highlightSearchTerm = (text, searchTerm) => {
        if (!searchTerm) return text;

        const regex = new RegExp(`(${searchTerm})`, 'gi');
        const parts = text.split(regex);

        return parts.map((part, index) =>
            regex.test(part) ?
                <span key={index} style={{ color: '#4A90E2' }}>{part}</span> :
                part
        );
    };

    // Ï£ºÏãù Ìï≠Î™© ÌÅ¥Î¶≠ (ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô Ï∂îÍ∞Ä)
    const handleStockClick = (stock) => {
        console.log("ÏÑ†ÌÉùÎêú Ï£ºÏãù:", stock);
        setQuery(stock.companyName);
        setIsOpen(false);

        // ÏÑ†ÌÉùÎêú Ï£ºÏãùÎßå ÏµúÍ∑º Í≤ÄÏÉâÏñ¥Ïóê Ï∂îÍ∞Ä
        addToRecentSearches(stock.companyName);

        // ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
        navigate(`/stock/${stock.stockCode}`);
    };

    // ÏµúÍ∑º Í≤ÄÏÉâÏñ¥ ÏÇ≠Ï†ú
    const clearRecentSearches = () => {
        setRecentSearches([]);
        localStorage.removeItem('recentStockSearches');
    };

    // Í∞úÎ≥Ñ ÏµúÍ∑º Í≤ÄÏÉâÏñ¥ ÏÇ≠Ï†ú
    const removeRecentSearch = (indexToRemove, e) => {
        e.stopPropagation();
        const newRecentSearches = recentSearches.filter((_, index) => index !== indexToRemove);
        setRecentSearches(newRecentSearches);
        localStorage.setItem('recentStockSearches', JSON.stringify(newRecentSearches));
    };

    // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
    useEffect(() => {
        return () => {
            if (searchTimeoutRef.current) {
                clearTimeout(searchTimeoutRef.current);
            }
        };
    }, []);

    return (
        <div className="stock-search-container" ref={searchRef}>
            <div className="search-input-wrapper">
                <input
                    type="text"
                    value={query}
                    onChange={handleInputChange}
                    onClick={handleInputClick}
                    onKeyPress={handleKeyPress}
                    placeholder="Ï¢ÖÎ™©Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                    className="search-input"
                />
            </div>

            {isOpen && (
                <div className="search-dropdown">
                    {/* ÏµúÍ∑º Í≤ÄÏÉâ ÏÑπÏÖò */}
                    {recentSearches.length > 0 && (
                        <div className="recent-searches-section">
                            <div className="section-header">
                                <span className="section-title">ÏµúÍ∑º Í≤ÄÏÉâ</span>
                                <button
                                    className="clear-button"
                                    onClick={clearRecentSearches}
                                >
                                    Ï†ÑÏ≤¥ ÏÇ≠Ï†ú
                                </button>
                            </div>
                            <div className="recent-searches-list">
                                {recentSearches.map((search, index) => (
                                    <div
                                        key={index}
                                        className="recent-search-item"
                                        onClick={() => handleRecentSearchClick(search)}
                                    >
                                        <span className="search-text">{search}</span>
                                        <button
                                            className="remove-search-btn"
                                            onClick={(e) => removeRecentSearch(index, e)}
                                        >
                                            √ó
                                        </button>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* Ï¢ÖÎ™© ÏÑπÏÖò */}
                    {query && results.length > 0 && (
                        <div className="search-results-section">
                            <div className="section-header">
                                <span className="section-title">Ï¢ÖÎ™©</span>
                            </div>
                            <div className="search-results-list">
                                {results.map((stock, index) => (
                                    <div
                                        key={index}
                                        className="search-result-item"
                                        onClick={() => handleStockClick(stock)}
                                    >
                                        <div className="search-stock-icon">{getMarketIcon(stock.marketType)}</div>
                                        <div className="search-stock-info">
                                            <div className="search-stock-name">
                                                {highlightSearchTerm(stock.companyName, query)}
                                            </div>
                                            <div className="search-stock-code">{stock.stockCode}</div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* Í≤ÄÏÉâ Í≤∞Í≥º ÏóÜÏùå */}
                    {query && results.length === 0 && (
                        <div className="no-results">
                            <span>Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.</span>
                        </div>
                    )}

                    {/* Ï¥àÍ∏∞ ÏÉÅÌÉú (Í≤ÄÏÉâÏñ¥ ÏóÜÍ≥† ÏµúÍ∑º Í≤ÄÏÉâÎèÑ ÏóÜÏùå) */}
                    {!query && recentSearches.length === 0 && (
                        <div className="empty-state">
                            <span>Ï¢ÖÎ™©Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî</span>
                        </div>
                    )}
                </div>
            )}
        </div>
    );
};

export default StockSearch;
